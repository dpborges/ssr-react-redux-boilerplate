Note when using google Oauth, you are using cookie based authentication, which is fine when
authenticating from a browser using a SPA. If browser authenticates directly with the API, 
users will be able to authenticate. (I do this today using JWT tokens).

What happens when you introduce a web server in between the browser and the API Sever? Since 
cookie based authentication is specific to a domain, port, or subdomain, hence the browser will only forward 
cookie to the domain/port that it sent authentication request to and received cookie from.  
The browser CANNOT  authenticate via the API server on one domain (eg api.mydomain.com), and expect
it to send the cookie to the Web server on another subdomain (e.g. app.mydomain.com), as the browser 
will only send the cookie to the originating server of the cookie at authentication time, which is the 
API server.

The solution is to introduce a proxy on the server, so you have the following sequence of steps:
    - Browser sends api auth request to proxy on our renderer server
    - The proxy forwards that authentication request to the API
    - After the API returns the cookie back to proxy, the proxy will communicate the cookie back to the browser.

As far as Browser is concerned the API server does not exist. The browser is going to think it is 
communicating with our renderer server. Unbeknownst to the browser, the proxy is handling the requests to 
the API server. The browser now thinks the cookie it got back was from the renderer server and not API 
server. The renderer server will be responsible for attaching the cookie from the API server when it sends
a response to the browser.

Here is the caveat. Once user is authenticated, the next time user makes a server side page request, it  will
not go through the proxy, but to the server, hence, the server needs to attach the cookie to pass it along to API Server.
Once the page is loaded on client side, all other API calls will go through proxy.

From what I understand, it boils down to 3 interaction scenarios:

> On the first API call made to authenticate, the api request must go through the Proxy Server. 
> Every initial server side request (after being authenticated) will bypass proxy, and go through the server. 
        This is because, when you initially render a page on the server, all the data fetching is happening on
        the server, hence the api call will be initiated from the server itself, bypassing the proxy altogether. 
        Therefore, itâ€™s the server's responsibility to attach the cookie to the API request when firing off 
        server side API calls.
> Once the page is loaded on the client, all subsequent API calls will go through the proxy server.


NEXT UP: Read documentation on next set of lessons (starting with lesson#59). 
    - In addtion to documenting what I learn in these lessons in the code base. 
    - In addition, I need to answer one question, How do I ensure the first authentication request is 
      initiated from the browser?  Do you design the login page such there is no server side / API interaction
      and just defer it to client?

      


